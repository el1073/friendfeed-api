#summary Documentation for the FriendFeed API

= Introduction =

The [http://friendfeed.com/ FriendFeed API] enables developers interact with the [http://friendfeed.com/ FriendFeed] web site programmatically via simple HTTP requests.

This is the technical documentation for the API. For more information on the product, see http://friendfeed.com/api/. The !FriendFeed API Terms of Service are available at http://friendfeed.com/api/terms.


= Core Concepts =

== Requests and Data Formats ==

All requests to the !FriendFeed API are simple HTTP GET and POST requests. For example, you can fetch the JSON version of the most recent 30 public entries published to !FriendFeed by fetching http://friendfeed.com/api/feed/public.

All of the API requests that output feeds are available in four formats: [http://www.json.org/ JSON], a simple form of XML, [http://cyber.law.harvard.edu/rss/rss.html RSS 2.0], and [http://tools.ietf.org/html/rfc4287 Atom 1.0]. JSON is the default output format. To request a different output format, simply add an `output=` argument to the URL:

  * http://friendfeed.com/api/feed/public?output=json
  * http://friendfeed.com/api/feed/public?output=xml
  * http://friendfeed.com/api/feed/public?output=rss
  * http://friendfeed.com/api/feed/public?output=atom

The JSON form of the feeds has the following structure:

  * `entries[]`
    * `id` - the !FriendFeed entry UUID, used to add comments/likes to the entry
    * `title`
    * `link`
    * `published`
    * `updated`
    * `service{}` - the service from which the entry came
      * `id` - the !FriendFeed ID for the service, e.g., "picasa"
      * `name` - the official name of the servuce, e.g., "Picasa Web Albums"
      * `profileUrl` - the user's profile URL on this service
    * `user{}` - the user who shared this entry
      * `id` - the !FriendFeed UUID of the user
      * `nickname` - the !FriendFeed nickname, used in !FriendFeed URLs
      * `profileUrl` - the !FriendFeed profile URL for this user
    * `comments[]`
      * `date`
      * `user{}` - same structure as the `user{}` structure above
      * `body` - the textual body of the comment
    * `likes[]`
      * `date`
      * `user{}` - same structure as the `user{}` structure above

      * `date` - the date