#summary Documentation for the FriendFeed API

= Introduction =

The [http://friendfeed.com/ FriendFeed API] enables developers interact with the [http://friendfeed.com/ FriendFeed] web site programmatically via simple HTTP requests.

This is the technical documentation for the API. For more information on the product, see http://friendfeed.com/api/. The !FriendFeed API Terms of Service are available at http://friendfeed.com/api/terms.


= Core Concepts =

== Requests and Data Formats ==

All requests to the !FriendFeed API are simple HTTP GET and POST requests. For example, you can fetch the JSON version of the most recent 30 public entries published to !FriendFeed by fetching http://friendfeed.com/api/feed/public.

All of the API requests that output feeds are available in four formats: [http://www.json.org/ JSON], a simple form of XML, [http://cyber.law.harvard.edu/rss/rss.html RSS 2.0], and [http://tools.ietf.org/html/rfc4287 Atom 1.0]. JSON is the default output format. To request a different output format, simply add an `output=` argument to the URL:

  * http://friendfeed.com/api/feed/public?output=json
  * http://friendfeed.com/api/feed/public?output=xml
  * http://friendfeed.com/api/feed/public?output=rss
  * http://friendfeed.com/api/feed/public?output=atom

The other API requests, like posting a new comment on an entry, only support the JSON and XML output formats since they do not output feed-oriented data.


== Authentication ==

If you are publishing data to !FriendFeed or if you are requesting the feed that includes data from a user with a private feed, your HTTP requests must be authenticated.

All !FriendFeed users have a *Remote Key* to provide third party applications access to their !FriendFeed. A !FriendFeed Remote Key is just like a password, except that it is only used for third party applications, so it only provides access to the functionality defined by the API. Users can easily reset it if a third party application abuses the API.

All requests that require authentication use [http://en.wikipedia.org/wiki/Basic_access_authentication HTTP Basic Authentication]. The username should be the user's nickname, and the password should be the user's Remote Key. You can direct user's to https://friendfeed.com/account/api to get their remote key if they have not memorized it.

The Python and PHP libraries available at http://code.google.com/p/friendfeed-api/ implement authentication for all methods that require it.


== JSON Callbacks ==

The JSON output format supports an additional argument `callback=` that wraps the JSON output in a function call to a function of your choice. This functionality is available to enable you to use the API with !JavaScript within a web browser. For example, http://friendfeed.com/api/feed/public?callback=foo outputs:

{{{
foo({"entries":[...]})
}}}

Using JSON and callbacks, you can place the !FriendFeed API request inside a `<script>` tag, and operate on the results with a function elsewhere in the !JavaScript code on the page.

All authentication is ignored if the `callback=` argument is given, so JSON callbacks only work with public feeds.


= Reading !FriendFeed Feeds =

== Overview ==

=== Feed Formats ===

The JSON form of the feeds has the following structure:

  * `entries[]`
    * `id` - the !FriendFeed entry UUID, used to add comments/likes to the entry
    * `title`
    * `link`
    * `published`
    * `updated`
    * `user{}` - the user who shared this entry
      * `id` - the user's !FriendFeed UUID
      * `nickname` - the user's !FriendFeed nickname, used in !FriendFeed URLs
      * `profileUrl` - the user's profile URL on !FriendFeed
    * `service{}` - the service from which the entry came
      * `id` - the service's !FriendFeed ID, e.g., "picasa"
      * `name` - the service's official name, e.g., "Picasa Web Albums"
      * `profileUrl` - the user's profile URL on this service
    * `comments[]`
      * `date`
      * `user{}` - same structure as the `user{}` structure above
      * `body` - the textual body of the comment
    * `likes[]`
      * `date`
      * `user{}` - same structure as the `user{}` structure above

The simple XML format (`output=xml`) has the same structure as the JSON. The RSS and Atom formats use the standard RSS and Atom attributes for title, link, published, and updated, and include extension elements for all of the other meta-data.

=== Filtering & Paging ===

All of the feed methods below support the following additional arguments:

  * `service` - only return entries from the service with the given ID, e.g., `service=twitter`
  * `start` - return entries starting with the given index, e.g., `start=30`
  * `num` - return `num` entries starting from `start`, e.g., `num=10`


== Feed Methods ==

=== /api/feed/public - Fetch all Public Entries ===

Returns the most recent public entries on !FriendFeed:

http://friendfeed.com/api/feed/public

Using the Python library:

{{{
service = friendfeed.FriendFeed()
feed = service.fetch_public_feed()
for entry in feed["entries"]:
    print entry["title"]
}}}

=== /api/feed/user - Fetch Entries from a Set of Users === 

Returns the most recent entries from one or more users, specified by nickname:

http://friendfeed.com/api/feed/user?nickname=bret

http://friendfeed.com/api/feed/user?nickname=bret,paul,jim

If more than one nickname is specified, the feed most recent entries from all of the given users. If any one of the users has a private feed, authentication is required.

Using the Python library:

{{{
service = friendfeed.FriendFeed()
feed = service.fetch_multi_user_feed(["bret", "jim", "paul"])
for entry in feed["entries"]:
    print entry["title"]
}}}

=== /api/feed/home - Fetch the Friends Feed ===

Returns the entries the authenticated user would see on their FriendFeed homepage - all of their subscriptions and friend-of-a-friend entries:

http://friendfeed.com/api/feed/home

Authentication is always required.

Using the Python library:

{{{
service = friendfeed.FriendFeed(nickname, remote_key)
feed = service.fetch_home_feed()
for entry in feed["entries"]:
    print entry["title"]
}}}