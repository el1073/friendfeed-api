*The !FriendFeed API is still private. Please do not distribute information about the API until it officially launches*

= !FriendFeed API Documentation =

= Introduction =

The [http://friendfeed.com/api/ FriendFeed API] enables developers interact with the [http://friendfeed.com/ FriendFeed] web site programmatically via simple HTTP requests.

This is the technical documentation for the API. For more information on the product, see http://friendfeed.com/api/. The !FriendFeed API Terms of Service are available at http://friendfeed.com/api/terms.


= Core Concepts =

== Requests and Data Formats ==

All requests to the !FriendFeed API are simple HTTP GET and POST requests. For example, you can fetch the JSON version of the most recent 30 public entries published to !FriendFeed by fetching http://friendfeed.com/api/feed/public.

All of the API requests that output feeds are available in four formats: [http://www.json.org/ JSON], a simple form of XML, [http://cyber.law.harvard.edu/rss/rss.html RSS 2.0], and [http://tools.ietf.org/html/rfc4287 Atom 1.0]. JSON is the default output format. To request a different output format, simply add an `output=` argument to the URL:

  * http://friendfeed.com/api/feed/public?output=json
  * http://friendfeed.com/api/feed/public?output=xml
  * http://friendfeed.com/api/feed/public?output=rss
  * http://friendfeed.com/api/feed/public?output=atom

The other API requests, like posting a new comment on an entry, only support the JSON and XML output formats since they do not output feed-oriented data.


== Authentication ==

If you are publishing data to !FriendFeed or if you are requesting the feed that includes data from a user with a private feed, your HTTP requests must be authenticated.

All !FriendFeed users have a *Remote Key* to provide third party applications access to their !FriendFeed. A !FriendFeed Remote Key is just like a password, except that it is only used for third party applications, so it only provides access to the functionality defined by the API. Users can easily reset it if a third party application abuses the API.

All requests that require authentication use [http://en.wikipedia.org/wiki/Basic_access_authentication HTTP Basic Authentication]. The username should be the user's nickname, and the password should be the user's Remote Key. You can direct user's to https://friendfeed.com/account/api to get their remote key if they have not memorized it.

The Python and PHP libraries available at http://code.google.com/p/friendfeed-api/ implement authentication for all methods that require it.


== JSON Callbacks ==

The JSON output format supports an additional argument `callback=` that wraps the JSON output in a function call to a function of your choice. This functionality is available to enable you to use the API with !JavaScript within a web browser. For example, http://friendfeed.com/api/feed/public?callback=foo outputs:

{{{
foo({"entries":[...]})
}}}

Using JSON and callbacks, you can place the !FriendFeed API request inside a `<script>` tag, and operate on the results with a function elsewhere in the !JavaScript code on the page.

All authentication is ignored if the `callback=` argument is given, so JSON callbacks only work with public feeds.


= Reading !FriendFeed Feeds =

== Overview ==

=== Feed Formats ===

The JSON form of the feeds has the following structure:

  * `entries[]`
    * `id` - the !FriendFeed entry UUID, used to add comments/likes to the entry
    * `title`
    * `link`
    * `published`
    * `updated`
    * `user{}` - the user who shared this entry
      * `id` - the user's !FriendFeed UUID
      * `nickname` - the user's !FriendFeed nickname, used in !FriendFeed URLs
      * `profileUrl` - the user's profile URL on !FriendFeed
    * `service{}` - the service from which the entry came
      * `id` - the service's !FriendFeed ID, e.g., "picasa"
      * `name` - the service's official name, e.g., "Picasa Web Albums"
      * `profileUrl` - the user's profile URL on this service
    * `comments[]`
      * `date`
      * `user{}` - same structure as the `user{}` structure above
      * `body` - the textual body of the comment
    * `likes[]`
      * `date`
      * `user{}` - same structure as the `user{}` structure above

The simple XML format (`output=xml`) has the same structure as the JSON. The RSS and Atom formats use the standard RSS and Atom attributes for title, link, published, and updated, and include extension elements for all of the other meta-data.

=== Filtering & Paging ===

All of the feed methods below support the following additional arguments:

  * `service` - only return entries from the service with the given ID, e.g., `service=twitter`
  * `start` - return entries starting with the given index, e.g., `start=30`
  * `num` - return `num` entries starting from `start`, e.g., `num=10`


== Methods ==

=== /api/feed/public - Fetch all Public Entries ===

Returns the most recent public entries on !FriendFeed:

http://friendfeed.com/api/feed/public

Using the !FriendFeed Python library:

{{{
service = friendfeed.FriendFeed()
feed = service.fetch_public_feed()
for entry in feed["entries"]:
    print entry["title"]
}}}


=== /api/feed/user/NICKNAME - Fetch Entries from a User === 

Returns the most recent entries from the user with the given nickname:

http://friendfeed.com/api/feed/user/bret

If the user has a private feed, authentication is required.

Using the !FriendFeed Python library:

{{{
service = friendfeed.FriendFeed()
feed = service.fetch_user_feed("bret")
for entry in feed["entries"]:
    print entry["title"]
}}}


=== /api/feed/user - Fetch Entries from Multiple Users === 

Returns the most recent entries from a list of users, specified by nickname:

http://friendfeed.com/api/feed/user?nickname=bret,paul,jim

If more than one nickname is specified, the feed most recent entries from all of the given users. If any one of the users has a private feed, authentication is required.

Using the !FriendFeed Python library:

{{{
service = friendfeed.FriendFeed()
feed = service.fetch_multi_user_feed(["bret", "jim", "paul"])
for entry in feed["entries"]:
    print entry["title"]
}}}


=== /api/feed/home - Fetch the Friends Feed ===

Returns the entries the authenticated user would see on their !FriendFeed homepage - all of their subscriptions and friend-of-a-friend entries:

http://friendfeed.com/api/feed/home

Authentication is always required.

Using the !FriendFeed Python library:

{{{
service = friendfeed.FriendFeed(nickname, remote_key)
feed = service.fetch_home_feed()
for entry in feed["entries"]:
    print entry["title"]
}}}


=== /api/feed/search - Search ===

Executes a search over the entries in FriendFeed. If the request is authenticated, the default scope is over all of the entries in the authenticated user's Friends Feed. If the request is not authenticated, the default scope is over all public entries.

http://friendfeed.com/api/feed/search?q=friendfeed

The query syntax is the same syntax as http://friendfeed.com/advancedsearch. The query operators are:

  * `who:` -restricts the search to a specific user, e.g., `who:bret`
  * `service:` restricts the search to a specific service ID, e.g., `service:twitter`

Using the !FriendFeed Python library:

{{{
service = friendfeed.FriendFeed()
feed = service.search("who:bret friendfeed")
for entry in feed["entries"]:
    print entry["title"]
}}}


= Publishing To !FriendFeed =

All of the calls to publish information to !FriendFeed are HTTP requests. You can perform test calls from a web browser using the HTTP Basic Authentication built into your browser at http://friendfeed.com/static/html/apitest.html.

== Create New Entries ==

=== /api/share - Publish Links or Messages ===

A POST request to `/feed/share` will publish a new entry on the authenticated user's feed. The arguments are:

  * `title` - *required* - The text of the new entry.
  * `link` - The URL of the new entry. If it is not specified, the new entry will look like a quoted message. If specified, it will look like a link.
  * `comment` - If specified, the given comment text is posted a comment under the new entry.
  * `imageN_url`, `imageN_link` - The thumbnail images for the entry, specified from a 0-based index. `image0_url` specifies the URL of the image, which will be resized to the maximum size of a thumbnail and stored on FriendFeed's servers. If `image0_link` is not given, the thumbnail will link to the main `link` URL. If it is specified, the thumbnail will link to the specified `image0_link`.

Example usage with the !FriendFeed Python library:

{{{
service = friendfeed.FriendFeed(nickname, remote_key)

# Publish a text message
service.publish_message("Testing the FriendFeed API")

# Publish a link
service.publish_link("Testing the FriendFeed API", "http://friendfeed.com/api/")

# Publish a link with thumbnail images
service.publish_link(
    title="Testing the FriendFeed API",
    link="http://friendfeed.com/api/",
    image_urls=[
        "http://friendfeed.com/static/images/jim-superman.jpg",
        "http://friendfeed.com/static/images/logo.png",
    ],
)
}}}

Example usage with `curl`:

{{{
curl -u "nickname:remotekey" -d "title=Testing+the+FriendFeed+API&link=http://friendfeed.com/" http://friendfeed.com/api/share
}}}


=== Upload Images with Entries ===

The `/api/share` method can also accept uploaded images encoded as `multipart/form-data`. This encoding is the standard used for file uploads within web browsers.

If any images are uploaded with the `/api/share` request, the original and the thumbnail are stored on !FriendFeed's servers, and the thumbnail is displayed with the entry.


== Comment and Like Entries ==

=== /api/comment - Add or Edit Comments ===

A POST request to `/feed/comment` will add a comment or edit an existing comment on a !FriendFeed entry. The arguments are:

  * `entry` - *required* - The !FriendFeed UUID of the entry to which this comment is attached.
  * `body` - *required* - The textual body of the comment.
  * `comment` - If given, the !FriendFeed UUID of the comment to edit. If not given, the request will create a new comment.

Example usage from the Python library:

{{{
service = friendfeed.FriendFeed(nickname, remote_key)
service.add_comment(
    entry="550e8400-e29b-41d4-a716-446655440000",
    body="Testing the FriendFeed API",
)
}}}

Example usage with `curl`:

{{{
curl -u "nickname:remotekey" -d "entry=550e8400-e29b-41d4-a716-446655440000&body=Testing+the+FriendFeed+API" http://friendfeed.com/api/comment
}}}

=== /api/comment/delete - Delete a Comment ===

A POST request to `/feed/comment/delete` will delete an existing comment. The arguments are:

  * `entry` - *required* - The !FriendFeed UUID of the entry to which this comment is attached.
  * `comment` - *required* - The !FriendFeed UUID of the comment to delete.


=== /api/like - "Like" an Entry ===

A POST request to `/feed/like` will add a "Like" to a !FriendFeed entry for the authenticated user.

  * `entry` - *required* - The !FriendFeed UUID of the entry to which this comment is attached

Example usage from the Python library:

{{{
service = friendfeed.FriendFeed(nickname, remote_key)
service.add_like("550e8400-e29b-41d4-a716-446655440000")
}}}

Example usage with `curl`:

{{{
curl -u "nickname:remotekey" -d "entry=550e8400-e29b-41d4-a716-446655440000" http://friendfeed.com/api/like
}}}



=== /api/like/delete - Delete a "Like" ===

A POST request to `/feed/like/delete` will delete an existing "Like." The arguments are:

  * `entry` - *required* - The !FriendFeed UUID of the entry to which this comment is attached.